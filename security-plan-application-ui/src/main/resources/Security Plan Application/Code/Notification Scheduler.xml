<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Security Plan Application.Code.Notification Scheduler" locale="">
  <web>Security Plan Application.Code</web>
  <name>Notification Scheduler</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Security Plan Application.Code.Security Plan ApplicationClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Notification Scheduler</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Security Plan Application.Code.Notification Scheduler</name>
    <number>0</number>
    <className>XWiki.SchedulerJobClass</className>
    <guid>0ce47367-0c98-452f-ab25-33d3ef066be3</guid>
    <class>
      <name>XWiki.SchedulerJobClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <contextDatabase>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>contextDatabase</name>
        <number>9</number>
        <picker>1</picker>
        <prettyName>Job execution context database</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextDatabase>
      <contextLang>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>contextLang</name>
        <number>8</number>
        <picker>1</picker>
        <prettyName>Job execution context lang</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextLang>
      <contextUser>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>contextUser</name>
        <number>7</number>
        <picker>1</picker>
        <prettyName>Job execution context user</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextUser>
      <cron>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>cron</name>
        <number>5</number>
        <picker>1</picker>
        <prettyName>Cron Expression</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </cron>
      <jobClass>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>jobClass</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Job Class</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobClass>
      <jobDescription>
        <contenttype>---</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <hint/>
        <name>jobDescription</name>
        <number>2</number>
        <picker>1</picker>
        <prettyName>Job Description</prettyName>
        <rows>10</rows>
        <size>45</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </jobDescription>
      <jobName>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>jobName</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Job Name</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobName>
      <script>
        <contenttype>PureText</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <hint/>
        <name>script</name>
        <number>6</number>
        <picker>1</picker>
        <prettyName>Job Script</prettyName>
        <rows>60</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </script>
      <status>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>status</name>
        <number>4</number>
        <picker>1</picker>
        <prettyName>Status</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </status>
    </class>
    <property>
      <contextDatabase>testwiki</contextDatabase>
    </property>
    <property>
      <contextLang>en</contextLang>
    </property>
    <property>
      <contextUser>XWiki.superadmin</contextUser>
    </property>
    <property>
      <cron>0 12 2 * * ?</cron>
    </property>
    <property>
      <jobClass>com.xpn.xwiki.plugin.scheduler.GroovyJob</jobClass>
    </property>
    <property>
      <jobDescription/>
    </property>
    <property>
      <jobName>Send Reminder when issue should be disclosed</jobName>
    </property>
    <property>
      <script>import org.joda.time.DateTime

def logger = services.logging.getLogger('org.xwiki.contrib.hackathon.security.scheduler.reminding')
def document = xcontext.getDoc()
def doc = xwiki.getDocument(document.getFullName())

logger.info('running scheduler job {} in version [{}]', doc.getPlainTitle(), doc.getVersion())

def receiver = 'security@xwiki.org'
// XXX testing
receiver = 'clemens.robbenhaar@green-meadows.de'

try {

  def now = new DateTime();
  def warningMargin = now; // .minusMonths(2);
  warningMargin = warningMargin.minusDays(4); // we actually want to be warned about three days ahead (I think)
  logger.info("check for issues do be disclosed before $warningMargin.")
  String queryString = 'from doc.object("Security Plan Application.Code.Security Plan ApplicationClass") as security where security.disclosureDate &gt; :date and not security.automaticEmbargo = 0 and not doc.fullName = \'Security Plan Application.Code.Security Plan ApplicationTemplate\'';
  def query = services.query.xwql(queryString).bindValue('date', new Date(warningMargin.getMillis()))
  def results = query.execute();

  if (results.isEmpty()) {
    logger.info("no upcoming disclosures")
  } else {
    fromAddr = services.mail.sender.configuration.fromAddress
    if (! fromAddr) {
      fromAddr = "no-reply@${request.serverName}"
    }
    def wikiRef = doc.getDocumentReference().getWikiReference()
    // def mailTemplateReference = services.model.createSpaceReference(, wikiRef)
    def mailTemplateReference = services.model.createDocumentReference(wikiRef.getName(), ['Security Plan Application', 'Code', 'NotificationMail'], 'WebHome')
    logger.info('try to send mail from [{}]', mailTemplateReference)

    results.each({ docName -&gt;

      def planDoc = xwiki.getDocument(docName)
      def planObj = planDoc.getObject('Security Plan Application.Code.Security Plan ApplicationClass')
      if (planObj == null) {
        return
      }

      def mailParams = ['from' : fromAddr, 'to' : receiver, 'language' : 'en']
      velocityVariables = [:]
      velocityVariables['securityPlanLink'] = planDoc.getExternalURL('view');
      velocityVariables['securityPlanTitle'] = planDoc.getDisplayTitle()
      velocityVariables['embargo'] = true; // otherwise we would not get here
      // FIXME: not really a link
      velocityVariables['jiraLink'] = 'n/a'
      issues = planObj.getValue('tickets')
      if (issues) {
        velocityVariables['jiraLink'] = String.join(',' , issues)
      } else {
        logger.info('no issues found for [{}]', docName)
      }

      versionNumbers = []
      logger.debug('try to collect versions [{}] for doc [{}]', planObj.getValue('fixVersions'), docName)
      planObj.getValue('fixVersions').each({ versionDocName -&gt;
        logger.debug('we get fix version [{}] for security plan [{}].', versionDocName, docName)

        def versionDoc = xwiki.getDocument(services.model.createDocumentReference(wikiRef.getName(), ['Version Management'], versionDocName))
        def versionObj = versionDoc.getObject('Version Management.Code.Version ManagementClass')
        if (versionObj &amp;&amp; versionObj.getValue('version')) {
          versionNumbers.add(versionObj.getValue('version'))
        } else {
          logger.warn('we have no version number in version [{}]', versionDoc)
          versionNumbers.add(versionDocName) // actually this is as good as the "version" attribute, usually
        }
      })
      if (versionNumbers.isEmpty()) {
        logger.info('no version numbers found for [{}]', docName)
      }
      velocityVariables['versions'] = versionNumbers
      mailParams['velocityVariables'] = velocityVariables

      def mailToSend = services.mail.sender.createMessage('template', mailTemplateReference, mailParams)
      mailToSend.addHeader('To', receiver)

      def mailResult = services.mail.sender.send([mailToSend], 'database')
      def failedMailStatuses = mailResult?.statusResult?.getAllErrors()
      if (failedMailStatuses) {
        while (failedMailStatuses.hasNext()) {
          def mailStatus = failedMailStatuses.next()
          logger.warn("could not send mail because of [{}]", mailStatus.errorDescription)
        }
      } else {
        logger.info('mail send for security plan at [{}]', docName)
        // TODO: now set the reminderSendDate
      }
    })
  }

  logger.info('done')
} catch (Exception e) {
  logger.error('did not work, too bad', e)
}</script>
    </property>
    <property>
      <status>Normal</status>
    </property>
  </object>
</xwikidoc>
